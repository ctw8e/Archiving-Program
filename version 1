# -*- coding: utf-8 -*-
"""
Author: Channing West

Changelog: 6/28/2019

This program archives rotational spectra from the Tektronix DPO73304D oscilloscope
at set intervals.

"""

import visa
import numpy as np
import os
import time
import scipy
import scipy.fftpack
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import askopenfilename
from tkinter.filedialog import askdirectory



class ScopeDriver:
    
    # Set up default class variables that are passed into an instance upon 
    # instantiation when instance variables are not explicitly defined.
    # The instrument is connected to the PC controller via ethernet running 
    # through and ethernet switch. The IP adress of the oscilloscope is _host.
    # math2 channel on the oscilloscope containing the averaged FID.
    _host = 'TCPIP::169.254.27.62::INSTR' 
    _source = 'Math2'
    _timeout = 5000  

    def __init__(self, host = None, source = None, timeout = None): 
        if host == None:
            self.host = ScopeDriver._host
#        else:
#            self.host = host
            
        if source == None:
            self.source = ScopeDriver._source
#        else:
#            self.source = source
            
        if timeout == None:
            self.timeout = ScopeDriver._timeout
#        else:
#            self.timeout = timeout
    
    # Use PyVisa to setup Resource Manager and establish connection between the
    # PC controller and the scope        
    def _connect(self):
        rm = visa.ResourceManager()
        connect = rm.open_resource(self.host)
        return connect
    
    # The query command is a hybrid write/read command. The controller will 
    # establish connection with the scope, ask about some parameter, and wait 
    # for a response from the scope. 
    def _query(self, command):
        scope_query = self._connect()
        scope_query.timeout = self.timeout
        query = scope_query.query(command)
        return query
    
    # Write is used when you want to set a parameter on the scope and do not 
    # need expect a response (no read).
    def _write(self, command):
        scope_write = self._connect()
        scope_write.timeout = self.timeout
        write_command = scope_write.write(command)
        return write_command     
    
    # Queries the scope for its identity (Make, model, etc.) using the standard
    # SCPI command. SCPI commands are used throughout the code.
    def _IDN(self):
        identity = self._query('*IDN?')
        return identity
    
    def scope_state(self):
        state = self._query('ACQuire:STATE?')
        return state
    
    def start_run(self):
#        self.clear_scope()
        self._write('ACQuire:STATE RUN')
        return "Averaging"
        
    def stop_run(self):
#        self._write('ACQuire:STOPAfter RUNSTOP')
        self._write('ACQuire:STATE STOP')
        return "Averaging stopped"
    
    # Queries the number of FastFrame acquisitions.
    def get_averages(self):
        avgs = self._query('ACQuire:NUMFRAMESACQuired?')
        return avgs
    
    # Selects the scope channel that the data will come from.
    def data_source(self):                                                      
        self._write('DATa:SOUrce Math2')

    def data_format(self):
        self._write('DATa:ENCdg ASCIi')
    
    # Allows you to select the data from a single frame or range of frames from
    # a FastFrame acquisition. We collect 9 total frames per gas shot. Eight 
    # unique frames and a summary frame.
    def frame_range(self, frame):
        self._write('DATa:FRAMESTARt %s' %frame)
        self._write('DATa:FRAMESTOP %s' %frame)
    
    # With the current instrument setup (2-8 GHz), we use a 40 microsecond 
    # detection time at a sample rate of 25 Gs/sec, giving us 1000000 data 
    # points in a FID. This method defines the portion of that data we want to 
    # transfer.
    def data_range(self, start = None, stop = None):
        self._write('DATa:STARt %i' %start)
        self._write('DATa:STOP %i' %stop)
        
    def set_math_averages(self, number):
        self._write('Math2:NUMAVg %i' %number)
    
    # Retrieves the preamble of the data being transferred.
    def preamble(self):
        header = self._query('wfmoutpre?').split(',')
        return header        

    # Retrieves the time domain waveform from the scope.
    def get_waveform(self):
        self.data_source()
        self.data_format()
        self.data_range(1, 1000000)
        self.frame_range(9)
        self.preamble()
        time_list = []
        intensity = self._query('CURVe?').strip().split(',')
        for i in range(0,len(intensity)):
            current_time = "{:.11f}".format(3E-6 + 4E-11*i)
            time_list.append(current_time)
        waveform = np.column_stack((time_list,intensity))
        return waveform
    
    # Clears data from scope.
    def clear_scope(self):
        self._write('CLEAR ALL')
        return "Instrument cleared"
    
    
class Archive_Spectra(ScopeDriver):
# This class inherits from the ScopeDriver class. This class saves waveforms
# when a user defined number of FIDs have been recoreded. The time domain file
# is saved as well as a Fourier transformed data set
    
    _save_freq = 10000
    _save_num = 2
    _start_frequency = 2000
    _stop_frequency = 8000
    _sampling_rate = 25E9
    _file_folder = 'C:\\Users\\Pate Lab\\OneDrive\\Oscilloscope Data-Controller'
    _base_name = 'Archive'

    def __init__(self, host = None, source = None, timeout = None,\
                 save_freq = None, save_num = None, start_frequency = None,\
                 stop_frequency = None, sampling_rate = None, file_folder = None, base_name = None): #file_folder = None,
        
        super().__init__()
        
        if save_freq == None:
            self.save_freq = int(Archive_Spectra._save_freq)
        else: 
            self.save_freq = save_freq
        
        if save_num == None:
            self.save_num = int(Archive_Spectra._save_num)
        else:
            self.save_num = save_num
        
        if start_frequency == None:
            self.start_frequency = int(Archive_Spectra._start_frequency)
        else:
            self.start_frequency = start_frequency
        
        if stop_frequency == None:
            self.stop_frequency = int(Archive_Spectra._stop_frequency)
        else:
            self.stop_frequency = stop_frequency
        
        if sampling_rate == None:
            self.sampling_rate = int(Archive_Spectra._sampling_rate)
        else:
            self.sampling_rate = sampling_rate
        
        if file_folder == None:
            self.file_folder = Archive_Spectra._file_folder
        else:
            self.file_folder = file_folder
        
        if base_name == None:
            self.base_name = Archive_Spectra._base_name
        else:
            self.base_name = base_name
            
    # Time domain and frequency domain data saved
    def save_FID_FT(self):
        thousand_avg = int(self.save_freq/1000)
#        os.chdir(self.file_folder)
        
        file_name = '{base_name}_{averages}{avg}_{time}'.format(base_name = self.base_name, averages = thousand_avg, avg = 'Kavg', time = time.strftime('%H_%M_%S'))
        file_name_txt = '{file_name}_{extension}'.format(file_name = file_name, extension = '.txt')
        file_name_ft = '{file_name}_{extension}'.format(file_name = file_name, extension = '.ft')
        np.savetxt(file_name_txt, self.get_waveform(), fmt = '%s')
        
        # This code has been taken from fft-zero-padding-with heading.py and 
        # it performs a FT of the time domain data
#        sampling_rate = 25E9
        raw_data = open(file_name_txt,'r')
        
        timedomain = []
        
        for row in raw_data:
            temp = row.split()
            timedomain.append(float(temp[np.size(temp) - 1]))

        ndata = np.size(timedomain)

        kaiser_window = np.kaiser(ndata,9.5)	
        
        for i, row in enumerate(timedomain):
            timedomain[i] = row * kaiser_window[i]
        
        temp = np.zeros(ndata*2)
        temp[0:ndata] = timedomain
        timepad = temp
        
        fft = abs(scipy.fftpack.fft(timepad))/100
        freq = (scipy.fftpack.fftfreq(np.size(timepad),1/(self.sampling_rate*10E9)))/1E6
        freqs = []
        ft = []
        for i, row in enumerate(freq):
            if row > self.start_frequency and row < self.stop_frequency:
                freqs.append(row)
                ft.append(fft[i]) 
        
        out = np.zeros((np.size(freqs),2))
        for i,row in enumerate(freqs):
            out[i,0]=row
            out[i,1]=ft[i]#*gain[i,1]
            
        np.savetxt(file_name_ft, out)        
        
    # Saves a set number of spectra.        
    def archive_loop(self):        
        counter = 0
        self.set_math_averages(int(self.save_freq)/10)
        scope_state = self.scope_state()
        if scope_state == 'ON':
            self.stop_run()
            self.clear_scope()
            self.start_run()
        else:
            self.start_run()
        while counter < int(self.save_num):
#            self.start_run()
            time.sleep(1)
            current_avg = self.get_averages()
            if int(current_avg) < int(self.save_freq):
                time.sleep(1)
            else:
                counter += 1
                self.stop_run()
                self.save_FID_FT()
                self.clear_scope()
                self.start_run()

        self.stop_run()
        print("Archiving is complete")
        
        
class Archive_GUI(Frame, Archive_Spectra):
    
    def __init__(self, master=None, host = None, source = None, timeout = None,\
                 save_freq = None, save_num = None, start_frequency = None,\
                 stop_frequency = None, sampling_rate = None, base_name = None):
        
        Frame.__init__(self, master)
        super().__init__() #self, master, host, source, timeout, save_freq, save_num, start_frequency, stop_frequency, sampling_rate, base_name 
        self.master = master
        self.init_window()
    
    def init_window(self):
        self.master.title('Mixture Analysis')

#--------------------------------Variables-------------------------------------        
        self.save_freq = IntVar()
        self.save_num = IntVar()
        self.start_frequency = IntVar()
        self.stop_frequency = IntVar()
        self.sampling_rate = IntVar()
        self.base_name = StringVar()

#-----------------------------------Labels-------------------------------------        
        labels = [('save_freq_label','Number of averages before save:'),\
                  ('save_num_label','Number of files to archive:'),\
                  ('start_frequency_label','Starting frequency (MHz):'),\
                  ('stop_frequency_label','Stopping frequency (MHz):'),\
                  ('sampling_rate_label','Digitization rate (GSa/s):'),\
                  ('base_name_label','Base file name:')]
        
        counter = 0
        
        for var, label in labels:
            var = Label(self.master, text=label, justify=RIGHT).grid(row=counter, column=0, sticky=E)
            counter += 1
            
#----------------------------------Entries-------------------------------------        
        entries = [('save_freq_entry' , self.save_freq),\
                   ('save_num_entry' , self.save_num),\
                   ('start_frequency_entry' , self.start_frequency),\
                   ('stop_frequency_entry' , self.stop_frequency),\
                   ('sampling_rate_entry', self.sampling_rate),\
                   ('base_name_entry' , self.base_name)]

        counter = 0

        for entry, var in entries:
            entry = Entry(self.master, textvariable=var, justify=CENTER).grid(row=counter, column=1)
            counter += 1

#----------------------------------Buttons-------------------------------------
        set_directory = Button(self.master, text="Choose directory for saving files", command=self.choose_directory)\
        .grid(row=15, column=1)
        
#        run_button = Button(self.master, text="Run", command=self.run_archive)
        
        destroy_button = Button(self.master,text="Exit",command=self.client_exit)\
        .grid(row=16,column=1)
        
        
    def choose_directory(self):
        directory = askdirectory()
        os.chdir(directory)
            
    def client_exit(self):
        self.master.destroy()


root = Tk()
my_gui = Archive_GUI(root)
root.mainloop()


def get_archive_params():
    save_freq = my_gui.save_freq.get()
    save_num = my_gui.save_num.get()
    start_frequency = my_gui.start_frequency.get()
    stop_frequency = my_gui.stop_frequency.get()
    sampling_rate = my_gui.sampling_rate.get()
    base_name = my_gui.base_name.get()
    return save_freq, save_num, start_frequency, stop_frequency, sampling_rate, base_name

save_freq, save_num, start_frequency, stop_frequency, sampling_rate, base_name = get_archive_params()
#print(save_freq, save_num, start_frequency, stop_frequency, sampling_rate, base_name)    
#
instance = Archive_Spectra(save_freq = save_freq, save_num = save_num, start_frequency = start_frequency, stop_frequency = stop_frequency, sampling_rate = sampling_rate, base_name = base_name)
file = instance.archive_loop()        
